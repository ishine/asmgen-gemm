#include <cstdint>
#include <vector>

using std::size_t;

typedef ${DT} data_type;

$GETSIMDSIZE

void naive_asmgen_gemm(
        char transa, char transb,
        const std::size_t M, const std::size_t N, const std::size_t K,
        const data_type alpha_v,
        data_type* A, std::size_t lda,
        data_type* B, std::size_t ldb,
        const data_type beta_v,
        data_type* C, std::size_t ldc)
{
    std::size_t nrest = N%${NR};
    std::size_t mrest = M%${MR};
    auto iterations = K/${UNROLL};
    auto kleft = (K % ${UNROLL});
    #pragma omp parallel for
    for(std::size_t m = 0; m < M-mrest; m+=${MR})
    {
        std::vector<data_type> packed_b(${NR}*K);
        std::vector<data_type> packed_a(${MR}*K);
        std::vector<data_type> c_tile(${MR}*${NR});
        for(std::size_t k = 0; k < K; k++)
        {
            #pragma omp unroll(${MR})
            for(std::size_t mi = 0; mi < ${MR}; mi++)
            {
                packed_a[k*${MR}+mi] = A[(m+mi)*lda+k];
            }
        }
        for(std::size_t n = 0; n < N-nrest; n+=${NR})
        {
            for(std::size_t k = 0; k < K; k++)
            {
                #pragma omp unroll(${NR})
                for(std::size_t ni = 0; ni < ${NR}; ni++)
                {
                    packed_b[k*${NR}+ni] = B[k*ldb+n+ni];
                }
            }
            #pragma omp unroll(${MR})
            for(std::size_t mr = 0; mr < ${MR}; mr++)
            {
                #pragma omp unroll(${NR})
                for(std::size_t nr = 0; nr < ${NR}; nr++)
                {
                     c_tile[nr*${MR}+mr] = C[(m+mr)*ldc+n+nr];
                }
            }
            auto* a = packed_a.data();
            auto* b = packed_b.data();
            auto* c = c_tile.data();
            const auto* alpha = &alpha_v;
            const auto* beta = &beta_v;
#if 1
            asm(
            ${GEMM}
            );
#else
            std::vector<data_type> accum_tile(${MR}*${NR},0.0);
            for(std::size_t k = 0; k < K; k++)
            {
                #pragma omp unroll(${MR})
                for(std::size_t mr = 0; mr < ${MR}; mr++)
                {
                    #pragma omp unroll(${NR})
                    for(std::size_t nr = 0; nr < ${NR}; nr++)
                    {
                        accum_tile[nr*${MR}+mr] += packed_a[k*${MR}+mr]*packed_b[k*${NR}+nr];
                    }
                }
            }
            #pragma omp unroll(${MR})
            for(std::size_t mr = 0; mr < ${MR}; mr++)
            {
                #pragma omp unroll(${NR})
                for(std::size_t nr = 0; nr < ${NR}; nr++)
                {
                    c_tile[nr*${MR}+mr] = beta_v*c_tile[nr*${MR}+mr] + alpha_v*accum_tile[nr*${MR}+mr];
                }
            }
#endif
            #pragma omp unroll(${MR})
            for(std::size_t mr = 0; mr < ${MR}; mr++)
            {
                #pragma omp unroll(${NR})
                for(std::size_t nr = 0; nr < ${NR}; nr++)
                {
                    C[(m+mr)*ldc+n+nr] = c_tile[nr*${MR}+mr];
                }
            }
        }
        for(std::size_t n = N-nrest; n < N; n++)
        {
            #pragma omp unroll(${MR})
            for(std::size_t mr = 0; mr < ${MR}; mr++)
            {
                double Caccum = 0.0;
                #pragma omp simd reduction(+:Caccum)
                for(std::size_t k = 0; k < K; k++)
                {
                    Caccum += alpha_v*B[k*ldb+n]*A[k+(m+mr)*lda];
                }
                C[ldc*(m+mr)+n] = beta_v*C[ldc*(m+mr)+n] + Caccum;
            }
        }
    }
    for(std::size_t m = M-mrest; m < M; m++)
    {
        for(std::size_t n = 0; n < N; n++)
        {
            double Caccum = 0.0;
            #pragma omp simd reduction(+:Caccum)
            for(std::size_t k = 0; k < K; k++)
            {
                Caccum += alpha_v*B[k*ldb+n]*A[k+m*lda];
            }
            C[ldc*m+n] = beta_v*C[ldc*m+n] + Caccum;
        }
    }
}
